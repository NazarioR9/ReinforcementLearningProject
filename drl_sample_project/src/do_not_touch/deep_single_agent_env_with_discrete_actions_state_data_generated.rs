// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DeepSingleAgentEnvWithDiscreteActionsStateDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeepSingleAgentEnvWithDiscreteActionsStateData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeepSingleAgentEnvWithDiscreteActionsStateData<'a> {
    type Inner = DeepSingleAgentEnvWithDiscreteActionsStateData<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> DeepSingleAgentEnvWithDiscreteActionsStateData<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeepSingleAgentEnvWithDiscreteActionsStateData { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DeepSingleAgentEnvWithDiscreteActionsStateDataArgs<'args>) -> flatbuffers::WIPOffset<DeepSingleAgentEnvWithDiscreteActionsStateData<'bldr>> {
      let mut builder = DeepSingleAgentEnvWithDiscreteActionsStateDataBuilder::new(_fbb);
      builder.add_max_actions_count(args.max_actions_count);
      builder.add_state_description_size(args.state_description_size);
      if let Some(x) = args.available_actions_ids { builder.add_available_actions_ids(x); }
      builder.add_score(args.score);
      if let Some(x) = args.state_description { builder.add_state_description(x); }
      builder.add_is_game_over(args.is_game_over);
      builder.finish()
    }

    pub const VT_STATE_DESCRIPTION: flatbuffers::VOffsetT = 4;
    pub const VT_STATE_DESCRIPTION_SIZE: flatbuffers::VOffsetT = 6;
    pub const VT_IS_GAME_OVER: flatbuffers::VOffsetT = 8;
    pub const VT_SCORE: flatbuffers::VOffsetT = 10;
    pub const VT_AVAILABLE_ACTIONS_IDS: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_ACTIONS_COUNT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn state_description(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_STATE_DESCRIPTION, None)
  }
  #[inline]
  pub fn state_description_size(&self) -> u64 {
    self._tab.get::<u64>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_STATE_DESCRIPTION_SIZE, Some(0)).unwrap()
  }
  #[inline]
  pub fn is_game_over(&self) -> bool {
    self._tab.get::<bool>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_IS_GAME_OVER, Some(false)).unwrap()
  }
  #[inline]
  pub fn score(&self) -> f32 {
    self._tab.get::<f32>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_SCORE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn available_actions_ids(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_AVAILABLE_ACTIONS_IDS, None)
  }
  #[inline]
  pub fn max_actions_count(&self) -> u64 {
    self._tab.get::<u64>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_MAX_ACTIONS_COUNT, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for DeepSingleAgentEnvWithDiscreteActionsStateData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>(&"state_description", Self::VT_STATE_DESCRIPTION, false)?
     .visit_field::<u64>(&"state_description_size", Self::VT_STATE_DESCRIPTION_SIZE, false)?
     .visit_field::<bool>(&"is_game_over", Self::VT_IS_GAME_OVER, false)?
     .visit_field::<f32>(&"score", Self::VT_SCORE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"available_actions_ids", Self::VT_AVAILABLE_ACTIONS_IDS, false)?
     .visit_field::<u64>(&"max_actions_count", Self::VT_MAX_ACTIONS_COUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct DeepSingleAgentEnvWithDiscreteActionsStateDataArgs<'a> {
    pub state_description: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub state_description_size: u64,
    pub is_game_over: bool,
    pub score: f32,
    pub available_actions_ids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub max_actions_count: u64,
}
impl<'a> Default for DeepSingleAgentEnvWithDiscreteActionsStateDataArgs<'a> {
    #[inline]
    fn default() -> Self {
        DeepSingleAgentEnvWithDiscreteActionsStateDataArgs {
            state_description: None,
            state_description_size: 0,
            is_game_over: false,
            score: 0.0,
            available_actions_ids: None,
            max_actions_count: 0,
        }
    }
}
pub struct DeepSingleAgentEnvWithDiscreteActionsStateDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeepSingleAgentEnvWithDiscreteActionsStateDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_state_description(&mut self, state_description: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_STATE_DESCRIPTION, state_description);
  }
  #[inline]
  pub fn add_state_description_size(&mut self, state_description_size: u64) {
    self.fbb_.push_slot::<u64>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_STATE_DESCRIPTION_SIZE, state_description_size, 0);
  }
  #[inline]
  pub fn add_is_game_over(&mut self, is_game_over: bool) {
    self.fbb_.push_slot::<bool>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_IS_GAME_OVER, is_game_over, false);
  }
  #[inline]
  pub fn add_score(&mut self, score: f32) {
    self.fbb_.push_slot::<f32>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_SCORE, score, 0.0);
  }
  #[inline]
  pub fn add_available_actions_ids(&mut self, available_actions_ids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_AVAILABLE_ACTIONS_IDS, available_actions_ids);
  }
  #[inline]
  pub fn add_max_actions_count(&mut self, max_actions_count: u64) {
    self.fbb_.push_slot::<u64>(DeepSingleAgentEnvWithDiscreteActionsStateData::VT_MAX_ACTIONS_COUNT, max_actions_count, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeepSingleAgentEnvWithDiscreteActionsStateDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeepSingleAgentEnvWithDiscreteActionsStateDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeepSingleAgentEnvWithDiscreteActionsStateData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for DeepSingleAgentEnvWithDiscreteActionsStateData<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("DeepSingleAgentEnvWithDiscreteActionsStateData");
      ds.field("state_description", &self.state_description());
      ds.field("state_description_size", &self.state_description_size());
      ds.field("is_game_over", &self.is_game_over());
      ds.field("score", &self.score());
      ds.field("available_actions_ids", &self.available_actions_ids());
      ds.field("max_actions_count", &self.max_actions_count());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_deep_single_agent_env_with_discrete_actions_state_data<'a>(buf: &'a [u8]) -> DeepSingleAgentEnvWithDiscreteActionsStateData<'a> {
  unsafe { flatbuffers::root_unchecked::<DeepSingleAgentEnvWithDiscreteActionsStateData<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_deep_single_agent_env_with_discrete_actions_state_data<'a>(buf: &'a [u8]) -> DeepSingleAgentEnvWithDiscreteActionsStateData<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<DeepSingleAgentEnvWithDiscreteActionsStateData<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `DeepSingleAgentEnvWithDiscreteActionsStateData`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked`.
pub fn root_as_deep_single_agent_env_with_discrete_actions_state_data(buf: &[u8]) -> Result<DeepSingleAgentEnvWithDiscreteActionsStateData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DeepSingleAgentEnvWithDiscreteActionsStateData>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DeepSingleAgentEnvWithDiscreteActionsStateData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked`.
pub fn size_prefixed_root_as_deep_single_agent_env_with_discrete_actions_state_data(buf: &[u8]) -> Result<DeepSingleAgentEnvWithDiscreteActionsStateData, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DeepSingleAgentEnvWithDiscreteActionsStateData>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DeepSingleAgentEnvWithDiscreteActionsStateData` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked`.
pub fn root_as_deep_single_agent_env_with_discrete_actions_state_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DeepSingleAgentEnvWithDiscreteActionsStateData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DeepSingleAgentEnvWithDiscreteActionsStateData<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DeepSingleAgentEnvWithDiscreteActionsStateData` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked`.
pub fn size_prefixed_root_as_deep_single_agent_env_with_discrete_actions_state_data_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DeepSingleAgentEnvWithDiscreteActionsStateData<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DeepSingleAgentEnvWithDiscreteActionsStateData<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DeepSingleAgentEnvWithDiscreteActionsStateData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DeepSingleAgentEnvWithDiscreteActionsStateData`.
pub unsafe fn root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked(buf: &[u8]) -> DeepSingleAgentEnvWithDiscreteActionsStateData {
  flatbuffers::root_unchecked::<DeepSingleAgentEnvWithDiscreteActionsStateData>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DeepSingleAgentEnvWithDiscreteActionsStateData and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DeepSingleAgentEnvWithDiscreteActionsStateData`.
pub unsafe fn size_prefixed_root_as_deep_single_agent_env_with_discrete_actions_state_data_unchecked(buf: &[u8]) -> DeepSingleAgentEnvWithDiscreteActionsStateData {
  flatbuffers::size_prefixed_root_unchecked::<DeepSingleAgentEnvWithDiscreteActionsStateData>(buf)
}
#[inline]
pub fn finish_deep_single_agent_env_with_discrete_actions_state_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<DeepSingleAgentEnvWithDiscreteActionsStateData<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_deep_single_agent_env_with_discrete_actions_state_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<DeepSingleAgentEnvWithDiscreteActionsStateData<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
